If there has been a common theme throughout my career as a programmer, it has been
the quest for better abstractions and better tools to support the craft of writing software.
Over the years, I have come to value one trait more than any other: composability. If
one can write code with good composability, it usually means that other traits we soft‐
ware developers value—such as orthogonality, loose coupling, and high cohesion—are
already present. It is all connected.
When I discovered Scala some years ago, the thing that made the biggest impression on
me was its composability.
Through some very elegant design choices and simple yet powerful abstractions that
were taken from the object-oriented and functional programming worlds, Martin
Odersky has managed to create a language with high cohesion and orthogonal, deep
abstractions that invites composability in all dimensions of software design. Scala is
truly a SCAlable LAnguage that scales with usage, from scripting all the way up to largescale enterprise applications and middleware.
Scala was born out of academia, but it has grown into a pragmatic and practical language
that is very much ready for real-world production use.
What excites me most about this book is that it’s so practical. Dean has done a fantastic
job, not only by explaining the language through interesting discussions and samples,
but also by putting it in the context of the real world. It’s written for the programmer
who wants to get things done.
I had the pleasure of getting to know Dean some years ago when we were both part of
the aspect-oriented programming community. Dean holds a rare mix of deep analytical
academic thinking and a pragmatic, get-things-done kind of mentality.
You are about to learn how to write reusable components using mixin and function
composition; how to write Reactive applications using Akka; how to make effective use
of advanced features in Scala such as macros and higher kinded types; how to utilize
Scala’s rich, flexible, and expressive syntax to build domain-specific languages; how to
xv
effectively test your Scala code; how to let Scala simplify your Big Data problems; and
much, much more.
Enjoy the ride. I sure did.
